snippet if
	if (${1:<condition>}) {
	}
snippet ife
	if (${1:<condition>}) {
	}
	else {
	}
snippet unless
	unless (${1:<condition>}) {
	}
snippet eval
	local $@;
	eval {
	};
	if (my $e = $@) {
	}
snippet while
	while (${1:<condition>}) {
	}
snippet for
	for my $${1:<element>} (@${2:<array>}) {
	}
snippet p
	print ${0:<variable>} . "\n";
snippet db
	$DB::single = 1;
snippet pp
	use Data::Dump qw(pp);
	print "#\e[34mDEBUG:\e[0m \e[31m" . '${1:<statement>}' . "\e[0m " . pp($1) . "\n";
snippet jpp
	use Data::Dump qw(pp);
	$self->status_log(type => 'debug', text => '${1:<statement>}: ' . pp($1));
snippet cpp
	use Data::Dump qw(pp);
	$self->logger->log_info("\e[31m" . '${1:<statement>}' . "\e[0m " . pp($1));
snippet fpp
	{my $LOG_THIS='${1:<statement>}'; use Data::Dump qw(pp); open(my $tmp_fh, '>>', '/tmp/filelog.txt'); print $tmp_fh "#\e[34m" . __FILE__ . "\e[0m \e[31m" . '$1' . "\e[0m " . pp($1) . "\n"; close $tmp_fh;}
snippet dump
	use Data::Dumper::Dumper;
	print Data::Dumper::Dumper(${0:<variable>});
snippet trace
	$SIG{'__DIE__'} = sub {
		require Carp; Carp::confess
	};
snippet epack
	package ${1:<package_name>};

	use strict;
	use warnings FATAL => 'all';
	use Params::Validate qw(validate validate_pos :types);

	use Exporter 'import';
	our @EXPORT_OK = qw(${2:<function_name>});

	sub $2 {
		my (${3:<param_name>}) = validate_pos(@_, 1);
		return;
	}

	1;
snippet gpack
	package ${1:<package_name>};

	use strict;
	use warnings FATAL => 'all';
	use Genome;

	class $1 {
	};

	1;
snippet gtest
	#!/usr/bin/env genome-perl

	use strict;
	use warnings FATAL => 'all';

	use Test::More;
	use above 'Genome';
	use Genome::Utility::Test qw(compare_ok);

	BEGIN {
		$ENV{UR_DBI_NO_COMMIT} = 1;
		$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
	};

	my $pkg = '${0:package_name}';
	use_ok($pkg) || die;

	my $VERSION = 1; # Bump this each time test data changes
	my $test_dir = Genome::Utility::Test->data_dir($pkg, "v$VERSION");
	if (-d $test_dir) {
		note "Found test directory ($test_dir)";
	} else {
		die "Failed to find test directory ($test_dir)";
	}

	done_testing();
snippet sub
	sub ${1:<function_name>} {
	}
snippet subs
	sub ${1:<function_name>} {
		my $self = shift;
	}
snippet subv
	sub ${1:<function_name>} {
		my %p = validate(@_, {
			${2:<param_name>} => {${3:<type>}},
		});
	}
snippet subsv
	sub ${1:<function_name>} {
		my $self = shift;
		my %p = validate(@_, {
			${1:<param_name>} => {${2:<type>}},
		});
	}
snippet subvp
	sub ${1:<function_name>} {
		my (${2:<param_name>}) = validate_pos(@_, 1);
	}
snippet subsvp
	sub ${1:<function_name>} {
		my ($self, ${2:<param_name>}) = validate_pos(@_, 1, 1);
	}
snippet suba
	sub ${1:<function_name>} {
		my $self = shift;
		my $class = $self->class;
		die "Abstract method '$1' must be defined in class '$class'";
	}
snippet upv
	use Params::Validate qw(validate validate_pos :types);
snippet wait
	print "========== Execution Paused (press ENTER to continue) ===========\n";
	<STDIN>;
